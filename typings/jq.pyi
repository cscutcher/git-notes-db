from collections.abc import Iterable, Mapping
from pydantic import JsonValue
from typing import Self

_NO_VALUE: _EmptyValue

class _EmptyValue: ...

class _Program:
    program_string: str
    def input(
        self, value: JsonValue = ..., text: str = ...
    ) -> _ProgramWithInput: ...
    def input_text(
        self, test: str, *, slurp: bool = ...
    ) -> _ProgramWithInput: ...
    def input_value(self, value: JsonValue) -> _ProgramWithInput: ...
    def input_values(
        self, values: Iterable[JsonValue]
    ) -> _ProgramWithInput: ...

class _ProgramWithInput:
    def all(self) -> list[JsonValue]: ...
    def first(self) -> JsonValue: ...
    def text(self) -> str: ...
    def __iter__(self) -> _ResultIterator: ...

class _ResultIterator:
    def __iter__(self) -> Self: ...
    def __next__(self) -> JsonValue: ...

def compile(inp: str, /, args: Mapping[str, JsonValue] = ...) -> _Program: ...

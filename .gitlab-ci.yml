# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- build
- publish
- release

checks:
  stage: test
  image: python:3.13-slim
  before_script:
    - apt-get update && apt-get install -y git
    - pip install uv
  script:
    - uv run nox -t checks
  only:
    - merge_requests
    - main

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml
variables:
  SECRET_DETECTION_ENABLED: 'true'
secret_detection:
  stage: test

build:
  stage: build
  image: python:3.13-slim
  before_script:
    - apt-get update && apt-get install -y git
    - pip install uv
  script:
    - uv build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

publish-gitlab:
  stage: publish
  environment: release
  image: python:3.13-slim
  dependencies:
    - build
  before_script:
    - pip install uv
  variables:
    UV_PUBLISH_USERNAME: gitlab-ci-token
    UV_PUBLISH_PASSWORD: $CI_JOB_TOKEN
  script:
    - uv publish --publish-url $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
  rules:
    - if: $CI_COMMIT_TAG

publish-pypi:
  stage: publish
  environment: release
  image: python:3-bookworm
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_TAG
  id_tokens:
    PYPI_ID_TOKEN:
      # Use "testpypi" if uploading to TestPyPI
      aud: pypi
  script:
    - ls -la
    # Install dependencies
    - python -m pip install -U twine

    # Upload to PyPI, add "--repository testpypi" if uploading to TestPyPI
    # With no token specified, twine will use Trusted Publishing
    - twine upload --repository pypi dist/*

release:
  stage: release
  environment: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  dependencies: 
    - publish-gitlab
    - publish-pypi
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
    - apk add --no-cache jq
    - |
      set -o xtrace
      echo "Configuring glab authentication..."
      export GITLAB_TOKEN="$CI_JOB_TOKEN"
      export GITLAB_HOST="gitlab.com"
      
      echo "Waiting for package to be available..."
      sleep 10
      
      echo "Querying GitLab API for package info..."
      QUERY_RESULT=$(glab api graphql -f query='query getPackageId($version: String!) { project(fullPath: "cscutcher-public/git-notes-db") { name packages(packageName: "git-notes-db", packageVersion: $version){ nodes { _links {webPath} }  } }}' -f version="$CI_COMMIT_TAG")
      echo "GraphQL query result:"
      echo "$QUERY_RESULT"
      echo "Extracting package path..."
      PACKAGE_PATH=$(echo "$QUERY_RESULT" | jq -r '.data.project.packages.nodes[0]._links.webPath')
      echo "Package path: $PACKAGE_PATH"
      echo "PACKAGE_URL=https://gitlab.com${PACKAGE_PATH}" >> release.env
  artifacts:
    reports:
      dotenv: release.env
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Release $CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Build Artifacts'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse?job=build'
        - name: 'PyPI Package'
          url: 'https://pypi.org/project/git-notes-db/$CI_COMMIT_TAG/'
        - name: 'GitLab Package'
          url: '$PACKAGE_URL'
